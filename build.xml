<project name="standard" default="main" basedir=".">

    <!-- ******************** Adjustable Properties *********************** -->

    <!-- Version Number -->
    <property name="standard-version" value="1.0.5" />

    <!-- Now bundle with JAXP 1.2 -->
    <property name="isJaxp12" value="true" />

    <property file="../build.properties"/>
    <property file="${user.home}/build.properties"/>
    <property file="../common.properties"/>
    <property name="jaxen-full.jar"   value="lib/jaxen-full.jar"/>
    <property name="saxpath.jar"      value="lib/saxpath.jar"/>
    <property name="classpath" value="${servlet23.jar}"/>
    <property name="taglib.name"    value="standard"/>

    <!-- ****************** Project Standard Properties ******************* -->

    <!-- *********************** Default Properties ********************** -->

    <!-- ********************* Derived Properties ************************* -->

    <!--

        These property values are derived from the previously defined values,
	and should not normally be overridden from the command line.

        build.doc                   Target directory for documentation app
        build.examples		    Target directory for examples app
        build.library               Target directory for tag library
	dist.doc                    Destination WAR for documentation app
	dist.examples		    Destination WAR for examples app
	dist.library                Destination JAR for tag library
	dist.tld                    Destination TLD file for tag library

    -->

    <!--
    <property name="dist-jr.tld"    value="${dist.dir}/${taglib.name}/${taglib.name}-jr.tld"/>
    <property name="dist-jx.tld"    value="${dist.dir}/${taglib.name}/${taglib.name}-jx.tld"/>
    <property name="dist-x.tld"    value="${dist.dir}/${taglib.name}/${taglib.name}-x.tld"/>
    <property name="dist-scriptfree.tld"    value="${dist.dir}/${taglib.name}/${taglib.name}-scriptfree.tld"/>
    -->
    <property name="jxpath.jar"	    value="lib/commons-JXPath-0.1-dev.jar"/>

  <!-- ********************** Destination Preparation ********************* -->

  <target name="prepare">
    <!-- Make sure required dependencies are available -->
    
    <antcall target="requiredJar">
       <param name="prop" value="servlet23.jar"/>
       <param name="file" value="${servlet23.jar}"/>
       <param name="desc" value="Servlet 2.3 API classes"/>
    </antcall>

    <antcall target="processJars">
      <param name="task" value="requiredJarIfPropSet"/>
    </antcall>
    
    <!-- Set up build directories -->
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.doc}"/>
    <mkdir dir="${build.doc}/WEB-INF"/>
    <mkdir dir="${build.doc}/WEB-INF/classes"/>
    <mkdir dir="${build.doc}/WEB-INF/lib"/>
    <mkdir dir="${build.examples}"/>
    <mkdir dir="${build.examples}/WEB-INF"/>
    <mkdir dir="${build.examples}/WEB-INF/classes"/>
    <mkdir dir="${build.examples}/WEB-INF/lib"/>
    <mkdir dir="${build.library}"/>
    <mkdir dir="${build.library}/META-INF"/>
    <!-- Set up distribution directory -->
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/${taglib.name}"/>
  </target>
  

  <!-- **************** JAXP 1.1, 1.2 copying ******************** -->

  <target name="copyJaxp11Dist" unless="isJaxp12">
    <copy file="${crimson.jar}" todir="${dist.dir}/${taglib.name}/lib"/>
  </target>

  <target name="copyJaxp12Dist" if="isJaxp12">
    <copy file="${dom.jar}" todir="${dist.dir}/${taglib.name}/lib"/>
    <copy file="${sax.jar}" todir="${dist.dir}/${taglib.name}/lib"/>
    <copy file="${xercesImpl.jar}" todir="${dist.dir}/${taglib.name}/lib"/>
    <copy file="${jaxp-api.jar}" todir="${dist.dir}/${taglib.name}/lib"/>
  </target>

  <!-- **************** JAXP 1.1, 1.2 compiling ******************** -->

  <target name="compileJaxp11" unless="isJaxp12">
      <javac srcdir="${library.src}" destdir="${build.library}"
         classpath="${servlet23.jar}:${jdbc2_0-stdext.jar}:${crimson.jar}:${xalan.jar}:${jaxen-full.jar}:${saxpath.jar}"
         debug="on"/>
  </target>

  <target name="compileJaxp12" if="isJaxp12">
      <javac srcdir="${library.src}" destdir="${build.library}"
         classpath="${servlet23.jar}:${jdbc2_0-stdext.jar}:${jaxp-api.jar}:${dom.jar}:${sax.jar}:${xercesImpl.jar}:${xalan.jar}:${jaxen-full.jar}:${saxpath.jar}"
         debug="on"/>
  </target>

  <!-- **************** Compile Tag Library Components ******************** -->

  <!-- Compile the documentation application -->
  <target name="documentation" depends="prepare">
    <copy todir="${build.doc}/WEB-INF">
      <fileset dir="${doc.src}/conf"/>
    </copy>
    <style in="${xml.src}/intro.xml"
           destdir="${build.doc}"                                          
           out="${build.doc}/intro.html"
           style="${taglibs.xsl}">
      <param name="prefix" expression="../../"/>
    </style>
    <copy todir="${build.doc}">
      <fileset dir="${doc.src}/web">
        <include name="**/*.html"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile the examples application -->
  <target name="examples" depends="library-dist">
    <copy todir="${build.examples}/WEB-INF">
      <fileset dir="${examples.src}/conf"/>
    </copy>
    <copy todir="${build.examples}">
      <fileset dir="${examples.src}/web"/>
    </copy>
    
    <antcall target="processJars">
      <param name="task" value="copyIfPropSet"/>
      <param name="todir" value="${build.examples}/WEB-INF/lib"/>
    </antcall>     

    <!-- Copy required external API jar files -->
    <!-- Copy the 'standard' TLD files -->
    <copy todir="${build.examples}/WEB-INF">
      <fileset dir="conf" includes="*.tld"/>
    </copy>
    <!-- Copy the 'standard' jar files -->
    <copy file="${dist.library}/lib/standard.jar"
              tofile="${build.examples}/WEB-INF/lib/standard.jar"/>
    <copy file="${dist.library}/lib/jstl.jar"
              tofile="${build.examples}/WEB-INF/lib/jstl.jar"/>
    <javac srcdir="${examples.src}" destdir="${build.examples}/WEB-INF/classes"
        classpath="${servlet23.jar}:${build.library}"/>
  </target>

  <!-- Compile the tag library itself -->
  <target name="library" depends="prepare">
    <copy todir="${build.library}/META-INF">
      <fileset dir="conf" includes="*.tld"/>
    </copy>
    <copy todir="${build.library}">
	<fileset dir="${library.src}">
	    <include name="**/*.properties"/>
	</fileset>
    </copy>

    <antcall target="compileJaxp11"/>
    <antcall target="compileJaxp12"/>
  </target>

  <!-- Compile the library as well as the associated applications -->
  <target name="main" depends="library,documentation,examples"/>


  <!-- ******************* Create Distribution Files ********************** -->

  <!-- Create the documentation application WAR file -->
  <target name="documentation-dist" depends="documentation">
    <jar jarfile="${dist.doc}" basedir="${build.doc}" excludes="intro.html"/>
    <mkdir dir="${taglibs.doc}"/>
    <copy todir="${taglibs.doc}">
      <fileset dir="${build.doc}">
        <exclude name="WEB-INF/**"/>
      </fileset>
    </copy>
  </target>

  <!-- Create the examples application WAR file -->
  <target name="examples-dist" depends="examples">
    <jar jarfile="${dist.examples}" basedir="${build.examples}"/>
  </target>

  <!-- Create the library distribution files -->
  <target name="library-dist" depends="library">
    <mkdir dir="${dist.library}/lib"/>
    <mkdir dir="${dist.library}/tld"/>
    <jar jarfile="${dist.library}/lib/standard.jar"
         basedir="${build.library}"
         excludes="javax/**">
      <manifest>
        <attribute name="Specification-Title" value="JavaServer Pages Standard Tag Library (JSTL)"/>
        <attribute name="Specification-Version" value="1.0"/>
        <attribute name="Implementation-Title" value="jakarta-taglibs 'standard': an implementation of JSTL"/>
        <attribute name="Implementation-Version" value="${standard-version}"/>
        <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        <attribute name="Implementation-Vendor-Id" value="org.apache"/>
        <attribute name="Extension-Name" value="org.apache.taglibs.standard"/>
      </manifest>         
    </jar>        

    <!-- Create the 'standard' API jar -->
    <jar jarfile="${dist.library}/lib/jstl.jar"
         basedir="${build.library}"
         includes="javax/**">
      <manifest>
        <attribute name="Specification-Title" value="JavaServer Pages Standard Tag Library (JSTL)"/>
        <attribute name="Specification-Version" value="1.0"/>
        <attribute name="Implementation-Title" value="JavaServer Pages Standard Tag Library API Reference Implementation"/>
        <attribute name="Implementation-Version" value="${standard-version}"/>
        <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc."/>
        <attribute name="Implementation-Vendor-Id" value="com.sun"/>
        <attribute name="Extension-Name" value="javax.servlet.jsp.jstl"/>
      </manifest>         
    </jar>        

    <copy file="../LICENSE" tofile="${dist.dir}/${taglib.name}/LICENSE"/>
    <copy file="../NOTICE" tofile="${dist.dir}/${taglib.name}/NOTICE"/>
    <copy file="README.dist" tofile="${dist.dir}/${taglib.name}/README"/>

    <antcall target="processJars">
      <param name="todir" value="${dist.dir}/${taglib.name}/lib"/>
      <param name="task" value="copyIfPropSet"/>
    </antcall>     

    <copy file="${conf.src}/c.tld" todir="${dist.dir}/${taglib.name}/tld"/>
    <copy file="${conf.src}/c-rt.tld" todir="${dist.dir}/${taglib.name}/tld"/>
    <copy file="${conf.src}/x.tld" todir="${dist.dir}/${taglib.name}/tld"/>
    <copy file="${conf.src}/x-rt.tld" todir="${dist.dir}/${taglib.name}/tld"/>
    <copy file="${conf.src}/fmt.tld" todir="${dist.dir}/${taglib.name}/tld"/>
    <copy file="${conf.src}/fmt-rt.tld" todir="${dist.dir}/${taglib.name}/tld"/>
    <copy file="${conf.src}/sql.tld" todir="${dist.dir}/${taglib.name}/tld"/>
    <copy file="${conf.src}/sql-rt.tld" todir="${dist.dir}/${taglib.name}/tld"/>
  </target>

  <target name="processJars">
    <!-- All jar files required at runtime are copied in the 'lib' dir -->
     
    <antcall target="processIfPropSet">
      <param name="prop" value="jdbc2_0-stdext.jar"/>
      <param name="file" value="${jdbc2_0-stdext.jar}"/>
      <param name="desc" value="Sun JDBC 2.0 API classes"/>
    </antcall>

    <antcall target="processIfPropSet">
      <param name="prop" value="jaxp-api.jar"/>
      <param name="file" value="${jaxp-api.jar}"/>
      <param name="desc" value="JAXP 1.2 API classes"/>
    </antcall>

    <antcall target="processIfPropSet">
      <param name="prop" value="dom.jar"/>
      <param name="file" value="${dom.jar}"/>
      <param name="desc" value="JAXP 1.2 DOM API classes"/>
    </antcall>

    <antcall target="processIfPropSet">
      <param name="prop" value="sax.jar"/>
      <param name="file" value="${sax.jar}"/>
      <param name="desc" value="JAXP 1.2 SAX API classes"/>
    </antcall>
           
    <antcall target="processIfPropSet">
      <param name="prop" value="xalan.jar"/>
      <param name="file" value="${xalan.jar}"/>
      <param name="desc" value="Xalan implementation"/>
    </antcall>

    <antcall target="processIfPropSet">
      <param name="prop" value="xercesImpl.jar"/>
      <param name="file" value="${xercesImpl.jar}"/>
      <param name="desc" value="Xerces implementation"/>
    </antcall>

    <antcall target="copyOldJars"/>

  </target>

  <target name="copyOldJars" if="todir">
    <copy file="${jaxen-full.jar}" todir="${todir}"/>
    <copy file="${saxpath.jar}" todir="${todir}"/>
  </target>

  <!-- javadoc -->
  <target name="javadoc-dist">
   <mkdir dir="${dist.library}/javadoc"/>
   <javadoc packagenames="javax.servlet.jsp.jstl.*"
            sourcepath="src"
            classpath="${servlet23.jar}:${jdbc2_0-stdext.jar}:${crimson.jar}:${jaxp-api.jar}:${dom.jar}:${sax.jar}:${xercesImpl.jar}:${xalan.jar}:${jaxen-full.jar}:${saxpath.jar}"
            destdir="${dist.library}/javadoc"
            bottom='&lt;font size="-1"&gt;Copyright 2003 Sun Microsystems, Inc. All Rights Reserved.&lt;/font&gt;'/>
  </target>

  <!-- Create the entire set of distribution files -->
  <target name="dist" depends="library-dist,examples-dist,documentation-dist,javadoc-dist"/>



  <!-- ************************ Utility Commands ************************** -->

  <!-- Delete output directories and files so we can build from scratch -->
  <target name="clean">
    <delete dir="${build.dir}/${taglib.name}"/>
    <delete dir="${dist.dir}/${taglib.name}"/>
  </target>

  <!-- Check the availability of a required jar -->
  <target name="requiredJar">
    <echo message="  ${prop}"/>
    <available file="${file}" property="requirement.satisfied"/>
    <antcall target="requiredJarFailed"/>
  </target>

  <!-- Support for target 'requiredJar' -->
  <target name="requiredJarFailed" unless="requirement.satisfied">
    <echo message="The property ${prop} must be set to a jar file containing"/>
    <echo message="the '${desc}'."/>
    <fail message="Current value for ${prop} is: ${file}."/>
  </target>
  
  <!-- Process a target only if a property is set.
       Allows us to ignore some dependencies that are included in
       J2SE 1.4 but were not prior to that. -->
  <target name="processIfPropSet">
    <echo message="  ${prop}"/>
    <condition property="prop.specified">
      <isSet property="${prop}"/>
    </condition>
    <antcall target="${task}"/>
    <antcall target="${task}Not"/>
  </target>

  <!-- Check the availability of a required jar only if property is set -->
  <target name="requiredJarIfPropSet" if="prop.specified">
    <antcall target="requiredJar"/>
  </target>

  <!-- Warning message when required jar is ignored because the property
       is not set. -->
  <target name="requiredJarIfPropSetNot" unless="prop.specified">
    <echo message="  Ignoring dependency on ${prop} because property is not set."/>
    <echo message="  OK as long as both compile and run-time environments are at least J2SE 1.4."/>
  </target>

  <!-- Copy file only if property is set -->
  <target name="copyIfPropSet" if="prop.specified">
    <copy file="${file}" todir="${todir}"/>
  </target>

  <!-- Warning message when file is not copied because the property
       is not set. -->
  <target name="copyIfPropSetNot" unless="prop.specified">
    <echo message="  Ignoring copy of ${prop} because property is not set."/>
  </target>  
  
</project>
